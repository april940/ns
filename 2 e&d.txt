import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.util.Base64;

public class EncryptionExample {

    public static void main(String[] args) throws Exception {
        String plainText = "This is a secret message";

        // Symmetric encryption using AES
        KeyGenerator keyGen = KeyGenerator.getInstance("AES");
        keyGen.init(256); // set key size to 256 bits
        SecretKey secretKey = keyGen.generateKey();
        Cipher aesCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        aesCipher.init(Cipher.ENCRYPT_MODE, secretKey);
        byte[] encryptedBytes = aesCipher.doFinal(plainText.getBytes());

        // Asymmetric encryption using RSA
        KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance("RSA");
        keyPairGen.initialize(2048); // set key size to 2048 bits
        KeyPair keyPair = keyPairGen.generateKeyPair();
        Cipher rsaCipher = Cipher.getInstance("RSA/ECB/PKCS1Padding");
        rsaCipher.init(Cipher.ENCRYPT_MODE, keyPair.getPublic());
        byte[] encryptedRSABytes = rsaCipher.doFinal(plainText.getBytes());

        // Print results
        System.out.println("Symmetric encryption using AES");
        System.out.println("Plain text: " + plainText);
        System.out.println("Encrypted: " + Base64.getEncoder().encodeToString(encryptedBytes));

        System.out.println("Asymmetric encryption using RSA");
        System.out.println("Plain text: " + plainText);
        System.out.println("Encrypted: " + Base64.getEncoder().encodeToString(encryptedRSABytes));
    }
}
